###############################################################################
#                          IMPORTS E CONFIGURA√á√ïES
###############################################################################

import streamlit as st
import sqlite3
import json
import pandas as pd
import time as time

import streamlit as st
import sqlite3
import json
import pandas as pd
import time as time

# -----------------------------------------------------------------------------
#                     Verifica√ß√£o de Login e Configura√ß√µes de P√°gina
# -----------------------------------------------------------------------------
if "usuario_logado" not in st.session_state or not st.session_state["usuario_logado"]:
    st.warning("üîí Acesso negado! Fa√ßa login.")
    st.stop()

st.set_page_config(
    page_title="Cadastro de Regras de Neg√≥cio",
    page_icon=":infinity:",
    layout="wide"
)

# CSS Customizado para modais
st.markdown("""
    <style>
        div[data-modal-container='true'] {
            z-index: 1002 !important;
        }
        .stDataEditor div[data-testid="stVerticalBlock"] {
            gap: 0.2rem;
        }
    </style>
""", unsafe_allow_html=True)

# Caminho do banco de dados
DB_PATH = "database/app_data.db"


# -----------------------------------------------------------------------------
#                          FUN√á√ïES AUXILIARES / CACHED
# -----------------------------------------------------------------------------
@st.cache_data
def get_iniciativas_usuario(perfil: str, setor: str) -> pd.DataFrame:
    """
    Retorna as iniciativas dispon√≠veis para o usu√°rio,
    filtradas por perfil e setor, se n√£o for 'admin'.
    """
    conn = sqlite3.connect(DB_PATH)
    query = "SELECT id_iniciativa, nome_iniciativa FROM td_iniciativas"
    if perfil != "admin":
        query += """
            WHERE id_iniciativa IN (
               SELECT id_iniciativa 
               FROM tf_cadastros_iniciativas 
               WHERE id_demandante = (
                  SELECT id_demandante FROM td_demandantes WHERE nome_demandante = ?
               )
            )
        """
        iniciativas = pd.read_sql_query(query, conn, params=[setor])
    else:
        iniciativas = pd.read_sql_query(query, conn)
    conn.close()
    return iniciativas


@st.cache_data
def carregar_dados_iniciativa(id_iniciativa: int) -> dict | None:
    """
    Carrega a √∫ltima linha de tf_cadastro_regras_negocio para a iniciativa dada.
    Retorna um dicion√°rio com as colunas esperadas ou None se n√£o existir.
    """
    conn = sqlite3.connect(DB_PATH)
    query = """
        SELECT *
        FROM tf_cadastro_regras_negocio
        WHERE id_iniciativa = ?
        ORDER BY data_hora DESC
        LIMIT 1
    """
    df = pd.read_sql_query(query, conn, params=[id_iniciativa])
    conn.close()

    if df.empty:
        return None

    row = df.iloc[0]

    # Eixos tem√°ticos salvos em JSON
    try:
        eixos_tematicos = json.loads(
            row["eixos_tematicos"]) if row["eixos_tematicos"] else []
    except:
        eixos_tematicos = []

    # Demais informa√ß√µes salvas em JSON
    info_json = row.get("demais_informacoes", "") or ""
    try:
        info_dict = json.loads(info_json) if info_json else {}
    except:
        info_dict = {}

    return {
        "objetivo_geral":      row["objetivo_geral"],
        "objetivos_especificso": row["objetivos_especificos"],
        "eixos_tematicos":     row["eixos_tematicos"],
        "introducao":          row.get("introducao", ""),
        "justificativa":       row.get("justificativa", ""),
        "metodologia":         row.get("metodologia", ""),
        "demais_informacoes":  info_dict
    }


@st.cache_data
def carregar_resumo_iniciativa(setor: str) -> pd.DataFrame | None:
    """
    Carrega o resumo a partir de td_dados_resumos_sei, filtrando por 'demandante' = setor.
    Retorna um DataFrame ou None se vazio.
    """
    conn = sqlite3.connect(DB_PATH)
    query = "SELECT * FROM td_dados_resumos_sei WHERE demandante = ?"
    df = pd.read_sql_query(query, conn, params=[setor])
    conn.close()
    if df.empty:
        return None
    return df


def salvar_dados_iniciativa(
    id_iniciativa: int,
    usuario: str,
    objetivo_geral: str,
    objetivos_especificos: list[str],
    eixos_tematicos: list[dict],
    introducao: str,
    justificativa: str,
    metodologia: str,
    demais_informacoes: dict
):
    """
    Salva registro na tf_cadastro_regras_negocio, mantendo hist√≥rico m√°ximo de 3 registros.

    - objetivos_especificos: lista de strings
    - eixos_tematicos: lista de dicts
    - demais_informacoes: dict de informa√ß√µes complementares

    Tamb√©m atualiza as colunas "acoes_manejo" e "insumos" com base nos eixos.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # Limite de 3 hist√≥ricos por iniciativa
    cursor.execute("""
        SELECT COUNT(*)
        FROM tf_cadastro_regras_negocio
        WHERE id_iniciativa = ?
    """, (id_iniciativa,))
    total_reg = cursor.fetchone()[0]
    if total_reg >= 3:
        cursor.execute("""
            DELETE FROM tf_cadastro_regras_negocio
            WHERE id IN (
                SELECT id
                FROM tf_cadastro_regras_negocio
                WHERE id_iniciativa = ?
                ORDER BY data_hora ASC
                LIMIT 1
            )
        """, (id_iniciativa,))

    # Converte listas/dicts para JSON
    objetivos_json = json.dumps(objetivos_especificos or [])
    eixos_json = json.dumps(eixos_tematicos or [])

    # Extrai lista de a√ß√µes e insumos a partir de eixos
    acoes_set = set()
    insumos_set = set()
    for eixo in eixos_tematicos:
        for ac_id, ac_data in eixo.get("acoes_manejo", {}).items():
            acoes_set.add(ac_id)
            for ins_id in ac_data.get("insumos", []):
                insumos_set.add(ins_id)

    acoes_json = json.dumps(list(acoes_set))
    insumos_json = json.dumps(list(insumos_set))

    # Regra consolidada
    final_rule = {
        "objetivo_geral": objetivo_geral,
        "objetivos_especificos": objetivos_especificos,
        "eixos_tematicos": eixos_tematicos,
        "acoes": list(acoes_set),
        "insumos": list(insumos_set)
    }
    regra_json = json.dumps(final_rule)

    # Converte o dicion√°rio 'demais_informacoes' em JSON
    demais_info_json = json.dumps(
        demais_informacoes) if demais_informacoes else "{}"

    # 1) Distribui√ß√£o UC (df_uc_editado)
    if "df_uc_editado" in st.session_state and not st.session_state["df_uc_editado"].empty:
        distribuicao_ucs_json = st.session_state["df_uc_editado"].to_json(
            orient="records", force_ascii=False)
    else:
        distribuicao_ucs_json = "[]"

    # 2) Formas de Contrata√ß√£o (formas_contratacao_detalhes)
    if "formas_contratacao_detalhes" in st.session_state:
        formas_contratacao_json = json.dumps(
            st.session_state["formas_contratacao_detalhes"], ensure_ascii=False)
    else:
        formas_contratacao_json = "{}"

    # Insere no banco
    cursor.execute("""
        INSERT INTO tf_cadastro_regras_negocio (
            id_iniciativa,
            usuario,
            objetivo_geral,
            objetivos_especificos,
            eixos_tematicos,
            acoes_manejo,
            insumos,
            regra,
            introducao,
            justificativa,
            metodologia,
            demais_informacoes,
            distribuicao_ucs,
            formas_contratacao
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        id_iniciativa,
        usuario,
        objetivo_geral,
        objetivos_json,
        eixos_json,
        acoes_json,
        insumos_json,
        regra_json,
        introducao,
        justificativa,
        metodologia,
        demais_info_json,
        distribuicao_ucs_json,
        formas_contratacao_json   # Alterado aqui
    ))

    conn.commit()
    conn.close()


@st.cache_data
def get_options_from_table(
    table_name: str,
    id_col: str,
    name_col: str,
    filter_col: str | None = None,
    filter_val: str | None = None
) -> dict[str, str]:
    """
    L√™ da tabela `table_name` as colunas `id_col` e `name_col`.
    Opcionalmente filtra por `filter_col = filter_val`.
    Retorna um dict { id_val: name_val }.
    """
    conn = sqlite3.connect(DB_PATH)
    query = f"SELECT {id_col}, {name_col} FROM {table_name}"
    params = ()
    if filter_col and filter_val is not None:
        query += f" WHERE {filter_col} = ?"
        params = (str(filter_val),)

    df = pd.read_sql_query(query, conn, params=params)
    conn.close()

    return {str(row[id_col]): row[name_col] for _, row in df.iterrows()}


# -----------------------------------------------------------------------------
#            Inicializa√ß√£o para evitar KeyError no session_state
# -----------------------------------------------------------------------------

for key in ["introducao", "justificativa", "metodologia", "objetivo_geral"]:
    if key not in st.session_state:
        st.session_state[key] = ""

if "demais_informacoes" not in st.session_state:
    st.session_state["demais_informacoes"] = {}

if "objetivos_especificos" not in st.session_state:
    st.session_state["objetivos_especificos"] = []

if "eixos_tematicos" not in st.session_state:
    st.session_state["eixos_tematicos"] = []

if "df_uc_editado" not in st.session_state:
    st.session_state["df_uc_editado"] = pd.DataFrame()

if "insumos" not in st.session_state:
    st.session_state["insumos"] = {}


# # -----------------------------------------------------------------------------
# #          Fun√ß√£o para exibir informa√ß√µes complementares na barra lateral
# # -----------------------------------------------------------------------------
def exibir_info_lateral(id_iniciativa: int):
    # -----------------------------------------------------------------------------
    #          Exibir apenas informa√ß√µes do usu√°rio logado na barra lateral
    # -----------------------------------------------------------------------------
    st.sidebar.write("### üîë Usu√°rio Logado")

    # Recupera as informa√ß√µes do usu√°rio logado do session_state
    cpf_usuario = st.session_state.get("cpf", "(n√£o informado)")
    nome_usuario = st.session_state.get("nome", "(n√£o informado)")
    email_usuario = st.session_state.get("email", "(n√£o informado)")
    setor_usuario = st.session_state.get("setor", "(n√£o informado)")
    perfil_usuario = st.session_state.get("perfil", "comum")

    # Exibe as informa√ß√µes na barra lateral
    st.sidebar.write(f"**üë§ Nome:** {nome_usuario}")
    st.sidebar.write(f"**üìß E-mail:** {email_usuario}")
    st.sidebar.write(f"**üìå Diretoria:** {setor_usuario}")
    st.sidebar.write(f"**üî∞ Perfil:** {perfil_usuario}")


# -----------------------------------------------------------------------------
#                           In√≠cio da P√°gina
# -----------------------------------------------------------------------------
st.subheader("üìù Cadastro de Regras de Neg√≥cio")

perfil = st.session_state["perfil"]
setor = st.session_state["setor"]
cpf_usuario = st.session_state["cpf"]

# 1) Seleciona Iniciativa do usu√°rio
iniciativas = get_iniciativas_usuario(perfil, setor)
if iniciativas.empty:
    st.warning("üö´ Nenhuma iniciativa dispon√≠vel para voc√™.")
    st.stop()

with st.expander("Selecione a Iniciativa para Cadastro"):
    nova_iniciativa = st.selectbox("",

        options=iniciativas["id_iniciativa"],
        format_func=lambda x: iniciativas.set_index(
            "id_iniciativa").loc[x, "nome_iniciativa"],
        key="sel_iniciativa"
    )

# st.caption("‚ÑπÔ∏è Informa√ß√µes Originais do Resumo Executivo de Iniciativas dispon√≠veis no final da p√°gina", help="ref.: documentos SEI")

# 2) Carregamento inicial da iniciativa se mudou
if "carregou_iniciativa" not in st.session_state or st.session_state["carregou_iniciativa"] != nova_iniciativa:
    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # 1Ô∏è‚É£ BUSCA DADOS NA TABELA PRINCIPAL PRIMEIRO (tf_cadastro_regras_negocio)
    # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    conn = sqlite3.connect(DB_PATH)
    query = """
        SELECT objetivo_geral, objetivos_especificos, eixos_tematicos,
               introducao, justificativa, metodologia, demais_informacoes
        FROM tf_cadastro_regras_negocio
        WHERE id_iniciativa = ?
        ORDER BY data_hora DESC
        LIMIT 1
    """
    dados_iniciativa = pd.read_sql_query(query, conn, params=[nova_iniciativa])
    conn.close()

    if not dados_iniciativa.empty:
        row = dados_iniciativa.iloc[0]

        # Objetivos Espec√≠ficos: Sempre carrega do banco primeiro
        try:
            objetivos_especificos = json.loads(
                row["objetivos_especificos"]) if row["objetivos_especificos"] else []
        except:
            objetivos_especificos = []

        st.session_state["objetivo_geral"] = row["objetivo_geral"]
        st.session_state["objetivos_especificos"] = objetivos_especificos

        # Eixos Tem√°ticos
        try:
            st.session_state["eixos_tematicos"] = json.loads(
                row["eixos_tematicos"]) if row["eixos_tematicos"] else []
        except:
            st.session_state["eixos_tematicos"] = []

        # Textos
        st.session_state["introducao"] = row["introducao"]
        st.session_state["justificativa"] = row["justificativa"]
        st.session_state["metodologia"] = row["metodologia"]

        # Demais informa√ß√µes
        try:
            st.session_state["demais_informacoes"] = json.loads(
                row["demais_informacoes"]) if row["demais_informacoes"] else {}
        except:
            st.session_state["demais_informacoes"] = {}

    else:
        # Se n√£o houver dados em `tf_cadastro_regras_negocio`, inicia com valores vazios
        st.session_state["objetivo_geral"] = ""
        st.session_state["objetivos_especificos"] = []
        st.session_state["eixos_tematicos"] = []
        st.session_state["introducao"] = ""
        st.session_state["justificativa"] = ""
        st.session_state["metodologia"] = ""
        st.session_state["demais_informacoes"] = {}

        # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        # 2Ô∏è‚É£ FALLBACK: BUSCA DADOS NO RESUMO (td_dados_resumos_sei) APENAS SE O PRINCIPAL ESTIVER VAZIO
        # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        if not st.session_state["objetivo_geral"]:
            conn = sqlite3.connect(DB_PATH)
            row_fallback = conn.execute("""
                SELECT objetivo_geral FROM td_dados_resumos_sei
                WHERE id_resumo = ? LIMIT 1
            """, (nova_iniciativa,)).fetchone()
            conn.close()

            if row_fallback:
                obj_geral_sei = row_fallback[0] or ""
                if obj_geral_sei:
                    st.session_state["objetivo_geral"] = obj_geral_sei

        if not st.session_state["introducao"] or not st.session_state["justificativa"] or not st.session_state["metodologia"]:
            conn = sqlite3.connect(DB_PATH)
            row_resumo_2 = conn.execute("""
                SELECT introdu√ß√£o, justificativa, metodologia
                FROM td_dados_resumos_sei
                WHERE id_resumo = ?
                LIMIT 1
            """, (nova_iniciativa,)).fetchone()
            conn.close()

            if row_resumo_2:
                intro_sei, justif_sei, metod_sei = row_resumo_2

                if not st.session_state["introducao"] and intro_sei:
                    st.session_state["introducao"] = intro_sei
                if not st.session_state["justificativa"] and justif_sei:
                    st.session_state["justificativa"] = justif_sei
                if not st.session_state["metodologia"] and metod_sei:
                    st.session_state["metodologia"] = metod_sei

    # 3Ô∏è‚É£ Finaliza o carregamento
    st.session_state["df_uc_editado_loaded"] = False
    st.session_state["carregou_iniciativa"] = nova_iniciativa


# Exibe na barra lateral (checkbox)
if st.sidebar.checkbox("Exibir informa√ß√µes do usu√°rio", value=False):
    exibir_info_lateral(nova_iniciativa)

st.divider()

st.write(
    f"**Iniciativa Selecionada:** {iniciativas.set_index('id_iniciativa').loc[nova_iniciativa, 'nome_iniciativa']}")

st.divider()


# ---------------------------------------------------------
#  TABS: Introdu√ß√£o / Objetivos / Justificativa / Metodologia
#        e a aba para Demais Informa√ß√µes
# ---------------------------------------------------------
tab_intro, tab_obj, tab_justif, tab_metod, tab_demandante, tab_eixos, tab_insumos, tab_uc, tab_forma_contratacao = st.tabs([
    "Introdu√ß√£o",
    "Objetivos",
    "Justificativa",
    "Metodologia",
    "Demandante",
    "Eixos Tem√°ticos",
    "Insumos",
    "Unidades de Conserva√ß√£o",
    "Formas de Contrata√ß√£o"
])


with st.form("form_textos_resumo"):

    # ---------------------------------------------------------
    # 1) OBJETIVOS
    # (aba separada, pois tem seu pr√≥prio form para atualizar
    #  objetivos espec√≠ficos)
    # ---------------------------------------------------------
    with tab_obj:
        st.subheader("Objetivo Geral")
        st.session_state["objetivo_geral"] = st.text_area(
            "Descreva o Objetivo Geral:",
            value=st.session_state["objetivo_geral"],
            height=140
        )

        st.subheader("Objetivos Espec√≠ficos")

        # Se n√£o existir, inicializa a lista de objetivos em session_state
        if "objetivos_especificos" not in st.session_state:
            st.session_state["objetivos_especificos"] = []

        # 1) Campo e bot√£o para adicionar NOVO objetivo (acima da lista)
        def adicionar_objetivo_callback():
            texto_novo = st.session_state.txt_novo_objetivo.strip()
            if texto_novo:
                st.session_state["objetivos_especificos"].append(texto_novo)
                st.session_state.txt_novo_objetivo = ""  # limpa a caixa ap√≥s adicionar
            else:
                st.warning(
                    "O texto do objetivo est√° vazio. Por favor, digite algo antes de adicionar.")

        st.text_area(
            label="Digite o texto do objetivo espec√≠fico a ser adicionado e clique no bot√£o:",
            key="txt_novo_objetivo",
            height=80
        )

        st.button(
            label="Adicionar Objetivo",
            on_click=adicionar_objetivo_callback
        )

        st.write("---")

        # 2) Agora exibimos a lista (simulando uma tabela) com Editar/Remover
        st.write("*Objetivos adicionados:*")

        # Cabe√ßalho tipo tabela
        col1, col2, col3 = st.columns([1, 8, 3])
        col1.write("**#**")
        col2.write("**Objetivo**")
        col3.write("*Edi√ß√£o e Exclus√£o*")

        # Loop para cada objetivo adicionado
        for i, objetivo in enumerate(st.session_state["objetivos_especificos"]):
            # Criamos uma nova linha em colunas
            c1, c2, c3 = st.columns([1, 6, 3])
            c1.write(f"{i + 1}")
            c2.write(objetivo)  # exibe o texto do objetivo

            # Na terceira coluna, colocamos bot√µes: Editar (via popover) e Remover
            with c3:
                col_edit, col_remove = st.columns([1, 1])
                with col_edit:
                    # 2.1) Bot√£o/Popover de Edi√ß√£o
                    with st.popover(label=f"‚úèÔ∏è"):
                        st.subheader(f"Editar Objetivo {i+1}")
                        novo_texto = st.text_area(
                            "Texto do objetivo:", objetivo, key=f"edit_obj_{i}")
                        if st.button("Salvar Edi√ß√£o", key=f"btn_save_edit_{i}"):
                            st.session_state["objetivos_especificos"][i] = novo_texto
                            st.rerun()
                with col_remove:
                    # 2.2) Bot√£o de Remo√ß√£o
                    if st.button("üóëÔ∏è", key=f"btn_remove_{i}"):
                        del st.session_state["objetivos_especificos"][i]
                        st.rerun()

    # ---------------------------------------------------------
    # 2) INTRODU√á√ÉO, JUSTIFICATIVA, METODOLOGIA e
    #    DEMAIS INFORMA√á√ïES
    # ---------------------------------------------------------
    # Aba de Introdu√ß√£o
    with tab_intro:
        st.subheader("Introdu√ß√£o")
        st.session_state["introducao"] = st.text_area(
            "Texto de Introdu√ß√£o:",
            value=st.session_state["introducao"],
            height=300
        )

    # Aba de Justificativa
    with tab_justif:
        st.subheader("Justificativa")
        st.session_state["justificativa"] = st.text_area(
            "Texto de Justificativa:",
            value=st.session_state["justificativa"],
            height=300
        )

    # Aba de Metodologia
    with tab_metod:
        st.subheader("Metodologia")
        st.session_state["metodologia"] = st.text_area(
            "Texto de Metodologia:",
            value=st.session_state["metodologia"],
            height=300
        )

    # Aba de Demais Informa√ß√µes
    # Aba de Demandante (somente Diretoria e Usu√°rio Respons√°vel)
    with tab_demandante:
        st.subheader("Informa√ß√µes do Usu√°rio Respons√°vel")

        # Recupera as informa√ß√µes do usu√°rio logado do session_state
        nome_usuario = st.session_state.get("nome", "(n√£o informado)")
        email_usuario = st.session_state.get("email", "(n√£o informado)")
        setor_usuario = st.session_state.get("setor", "(n√£o informado)")
        perfil_usuario = st.session_state.get("perfil", "comum")

        # Exibe apenas informa√ß√µes do usu√°rio respons√°vel pelo preenchimento
        st.write(f"**üë§ Nome do Preenchedor:** {nome_usuario}")
        st.write(f"**üìß E-mail:** {email_usuario}")
        st.write(f"**üìå Diretoria:** {setor_usuario}")
        # st.write(f"**üî∞ Perfil:** {perfil_usuario}")

        st.divider()
        st.info(
            "Estas informa√ß√µes s√£o registradas automaticamente e n√£o podem ser alteradas.")

        # Salvar informa√ß√µes do usu√°rio logado na sess√£o
        st.session_state["demais_informacoes"] = {
            "diretoria": st.session_state.get("setor", "N√£o informado"),
            "usuario_nome": st.session_state.get("nome", "N√£o informado"),
            "usuario_email": st.session_state.get("email", "N√£o informado"),
            "perfil": st.session_state.get("perfil", "N√£o informado"),
        }

    with tab_eixos:
        # -------------------------------------------
        # 4) EIXOS TEM√ÅTICOS - Sele√ß√£o de A√ß√µes
        # -------------------------------------------
        st.subheader("Eixos Tem√°ticos")

        eixos_opcoes = get_options_from_table(
            "td_samge_processos", "id_p", "nome")

        # Novo eixo para adicionar
        novo_eixo_id = st.selectbox(
            "Escolha um Eixo (Processo SAMGe) para adicionar:",
            options=[None] + sorted(eixos_opcoes.keys(),
                                    key=lambda x: eixos_opcoes[x]),
            format_func=lambda x: eixos_opcoes.get(x, "Selecione..."),
            key="sel_novo_eixo"
        )

       # Adicionar um novo eixo
        if st.button("‚ûï Adicionar Eixo Tem√°tico", key="btn_add_eixo"):
            if novo_eixo_id is None:
                st.warning("Selecione um eixo v√°lido antes de adicionar.")
            else:
                eixo_id_int = int(novo_eixo_id)
                ids_existentes = [int(e["id_eixo"])
                                  for e in st.session_state["eixos_tematicos"]]
                if eixo_id_int not in ids_existentes:
                    novo_eixo = {
                        "id_eixo": eixo_id_int,
                        "nome_eixo": eixos_opcoes.get(str(novo_eixo_id), "Novo Eixo"),
                        "acoes_manejo": {}
                    }
                    st.session_state["eixos_tematicos"].append(novo_eixo)

                    # ‚úÖ For√ßa atualiza√ß√£o dos insumos ao adicionar novo eixo
                    # Reseta os insumos para recalcular
                    st.session_state["insumos"] = {}

                    st.rerun()
                else:
                    st.info("Este eixo j√° est√° na lista.")

        # Exibir expanders para cada eixo adicionado
        for i, eixo in enumerate(st.session_state["eixos_tematicos"]):
            with st.expander(f"üìå {eixo['nome_eixo']}", expanded=False):
                # Carregar a√ß√µes dispon√≠veis
                acoes_dict = get_options_from_table(
                    "td_samge_acoes_manejo", "id_ac", "nome",
                    filter_col="processo_id", filter_val=eixo["id_eixo"]
                )

                # Criar DataFrame para edi√ß√£o
                acoes_df = pd.DataFrame([
                    {"ID": ac_id, "A√ß√£o": nome,
                        "Selecionado": ac_id in eixo.get("acoes_manejo", {})}
                    for ac_id, nome in acoes_dict.items()
                ])
                if "Selecionado" not in acoes_df.columns:
                    acoes_df["Selecionado"] = False

                with st.form(f"form_acoes_{i}"):
                    edited_acoes = st.data_editor(
                        acoes_df,
                        column_config={
                            "ID": st.column_config.TextColumn(disabled=True),
                            "A√ß√£o": st.column_config.TextColumn(disabled=True),
                            "Selecionado": st.column_config.CheckboxColumn("Selecionar")
                        },
                        hide_index=True,
                        use_container_width=True,
                        key=f"editor_acoes_{i}"
                    )

                    if st.form_submit_button("Salvar A√ß√µes"):
                        # Atualiza as a√ß√µes selecionadas no eixo
                        selecionadas = edited_acoes.loc[edited_acoes["Selecionado"], "ID"].tolist(
                        )
                        eixo["acoes_manejo"] = {
                            ac_id: {"insumos": []} for ac_id in selecionadas}
                        st.session_state["eixos_tematicos"][i] = eixo
                        st.success("A√ß√µes atualizadas!")

                # Bot√£o para excluir eixo
                if st.button("üóëÔ∏è Excluir Eixo", key=f"btn_del_{i}"):
                    del st.session_state["eixos_tematicos"][i]
                    st.rerun()

    # -------------------------------------------
    # 5) INSUMOS - Sele√ß√£o de Insumos por A√ß√£o
    # -------------------------------------------
    with tab_insumos:
        st.subheader("Insumos por A√ß√£o")

        # Conectar ao banco para carregar a tabela de insumos
        conn = sqlite3.connect(DB_PATH)
        df_insumos_all = pd.read_sql_query(
            "SELECT id, elemento_despesa, especificacao_padrao, descricao_insumo FROM td_insumos",
            conn
        )
        conn.close()

        # Inicializar estado para armazenar insumos selecionados, se ainda n√£o existir
        if "insumos_selecionados" not in st.session_state:
            st.session_state["insumos_selecionados"] = {}

        for i, eixo in enumerate(st.session_state["eixos_tematicos"]):
            with st.expander(f"üìå {eixo['nome_eixo']}", expanded=False):
                # Percorremos as a√ß√µes daquele eixo
                for ac_id, ac_data in eixo["acoes_manejo"].items():
                    st.markdown(
                        f"### A√ß√£o: {get_options_from_table('td_samge_acoes_manejo', 'id_ac', 'nome').get(ac_id, 'A√ß√£o Desconhecida')}"
                    )

                    # Inicializa a lista de insumos selecionados para essa a√ß√£o, se ainda n√£o existir
                    if ac_id not in st.session_state["insumos_selecionados"]:
                        st.session_state["insumos_selecionados"][ac_id] = set(
                            ac_data.get("insumos", []))

                    # Criar colunas para os filtros
                    col_filtro_elemento, col_filtro_espec = st.columns([5, 5])

                    # Filtro de Elemento de Despesa
                    elementos_unicos = [
                        "Todos"] + sorted(df_insumos_all["elemento_despesa"].dropna().unique())
                    with col_filtro_elemento:
                        elemento_selecionado = st.selectbox(
                            "Selecione o Elemento de Despesa",
                            elementos_unicos,
                            key=f"elemento_{i}_{ac_id}"
                        )

                    # Filtrando os insumos conforme o elemento de despesa selecionado
                    df_filtrado = (
                        df_insumos_all
                        if elemento_selecionado == "Todos"
                        else df_insumos_all[df_insumos_all["elemento_despesa"] == elemento_selecionado]
                    )

                    # Filtro de Especifica√ß√£o Padr√£o
                    especificacoes_unicas = [
                        "Todos"] + sorted(df_filtrado["especificacao_padrao"].dropna().unique())
                    with col_filtro_espec:
                        especificacao_selecionada = st.selectbox(
                            "Selecione a Especifica√ß√£o Padr√£o",
                            especificacoes_unicas,
                            key=f"especificacao_{i}_{ac_id}"
                        )

                    # Aplicando o segundo filtro caso o usu√°rio selecione uma especifica√ß√£o
                    if especificacao_selecionada != "Todos":
                        df_filtrado = df_filtrado[df_filtrado["especificacao_padrao"]
                                                  == especificacao_selecionada]

                    # Renomeando colunas para melhor compatibilidade com data_editor
                    df_combo = df_filtrado.rename(
                        columns={
                            "id": "ID",
                            "descricao_insumo": "Insumo"
                        }
                    )

                    # Recupera o "master" de insumos j√° selecionados do estado para essa a√ß√£o
                    sel_ids = st.session_state["insumos_selecionados"][ac_id]

                    # Marcamos a coluna "Selecionado" com True/False se estiver no "master"
                    df_combo["Selecionado"] = df_combo["ID"].apply(
                        lambda x: x in sel_ids)

                    # Exibir Data Editor dentro de um formul√°rio
                    with st.form(f"form_insumos_{i}_{ac_id}"):
                        edited_ins = st.data_editor(
                            df_combo[["ID", "Insumo", "Selecionado"]],
                            column_config={
                                "ID": st.column_config.TextColumn("C√≥d. Insumo", disabled=True),
                                "Insumo": st.column_config.TextColumn("Descri√ß√£o do Insumo", disabled=True),
                                "Selecionado": st.column_config.CheckboxColumn("Selecionar")
                            },
                            hide_index=True,
                            use_container_width=True,
                            key=f"editor_ins_{i}_{ac_id}"
                        )



                        col1, col2 = st.columns([1, 1])
                        with col1:
                            # Bot√£o para salvar as sele√ß√µes sem perder insumos anteriores
                            # O clique desse bot√£o s√≥ controla o subset atual (df_filtrado)
                            if st.form_submit_button("Salvar Insumos"):
                                # "edited_ins" cont√©m apenas o subset filtrado
                                # Precisamos mesclar com o "master" (sel_ids)

                                # 1) Obtemos o conjunto marcado agora:
                                selecionados_agora = set(
                                    edited_ins.loc[edited_ins["Selecionado"], "ID"])

                                # 2) Vamos atualizar o master:
                                #    - adiciona os que foram marcados
                                #    - remove os que foram desmarcados e que est√£o presentes no df_filtrado
                                # (itens fora do df_filtrado ficam inalterados)
                                for item_id in df_combo["ID"]:
                                    if item_id in selecionados_agora:
                                        # marcado => adiciona ao master
                                        sel_ids.add(item_id)
                                    else:
                                        # se est√° no master e est√° no subset filtrado, remove
                                        if item_id in sel_ids:
                                            sel_ids.remove(item_id)

                                # salva de volta no session_state
                                st.session_state["insumos_selecionados"][ac_id] = sel_ids
                                # atualiza o dicion√°rio da a√ß√£o
                                ac_data["insumos"] = list(sel_ids)

                                st.success(
                                    "Sele√ß√£o atualizada!")

                        with col2:
                            # informar a importancia de salvar antes de utilizar outro filtro
                            st.info("Salve as sele√ß√µes antes de utilizar outro filtro.")

                    # # Bot√£o para limpar todas as sele√ß√µes de insumos dessa a√ß√£o
                    # if st.button("Limpar Lista de Insumos", key=f"limpar_{i}_{ac_id}"):
                    #     st.session_state["insumos_selecionados"][ac_id] = set()
                    #     ac_data["insumos"] = []
                    #     st.success("Todos os insumos foram removidos para esta a√ß√£o!")

                    st.write("---")











   























    # ---------------------------------------------------------
    # ABA UC - DISTRIBUI√á√ÉO DE RECURSOS
    # ---------------------------------------------------------
   

    # Conjunto das colunas consideradas "padr√£o" (n√£o s√£o eixos)
    COL_PADRAO = {
        "id",
        "DEMANDANTE (diretoria)"
        "Nome da Proposta/Iniciativa Estruturante",
        "A√á√ÉO DE APLICA√á√ÉO",
        "CNUC",
        "id_demandante",
        "id_iniciativa",
        "id_acao",
        "Unidade de Conserva√ß√£o",
        "TetoSaldo dispon√≠vel",
        "TetoPrevisto 2025",
        "TetoPrevisto 2026",
        "TetoPrevisto 2027",
        "TetoTotalDisponivel",
        "A Distribuir"
    }

    def load_data_from_db():
        """Carrega e filtra as linhas da tabela para a iniciativa.
        N√£o recalcula automaticamente o Saldo para n√£o sobrescrever 
        dados no DB sem o usu√°rio clicar em 'Calcular Saldo'.
        """
        conn = sqlite3.connect(DB_PATH)
        df = pd.read_sql_query("SELECT * FROM tf_distribuicao_elegiveis", conn)
        conn.close()
        df = df[df["id_iniciativa"] == nova_iniciativa].copy()
        return df

    def salvar_no_banco(df_edit, col_eixos):
        """Grava no banco as colunas de eixos + 'A Distribuir'."""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        for idx, row in df_edit.iterrows():
            registro_id = row["id"]

            # Atualiza cada eixo
            for c_eixo in col_eixos:
                val = float(row.get(c_eixo, 0.0))
                cursor.execute(f"""
                    UPDATE tf_distribuicao_elegiveis
                    SET "{c_eixo}" = ?
                    WHERE id = ?
                """, (val, registro_id))

            # Atualiza saldo
            saldo_val = float(row.get("A Distribuir", 0.0))
            cursor.execute("""
                UPDATE tf_distribuicao_elegiveis
                SET "A Distribuir" = ?
                WHERE id = ?
            """, (saldo_val, registro_id))

        conn.commit()
        conn.close()

    def recalcular_saldo(df: pd.DataFrame):
        """Recalcula 'A Distribuir' = TetoTotalDisponivel - soma(eixos). 
        Retorna DataFrame atualizado."""
        if df.empty:
            return df

        # Descobrir colunas de eixos
        col_eixos_db = [c for c in df.columns if c not in COL_PADRAO]

        # Converte colunas relevantes para num√©rico, se n√£o forem
        if "TetoTotalDisponivel" in df.columns:
            df["TetoTotalDisponivel"] = pd.to_numeric(df["TetoTotalDisponivel"], errors="coerce").fillna(0)

        for c_eixo in col_eixos_db:
            df[c_eixo] = pd.to_numeric(df[c_eixo], errors="coerce").fillna(0)

        if "A Distribuir" not in df.columns:
            df["A Distribuir"] = 0.0
        else:
            df["A Distribuir"] = pd.to_numeric(df["A Distribuir"], errors="coerce").fillna(0)

        for idx, row in df.iterrows():
            soma_eixos = 0
            for c_eixo in col_eixos_db:
                soma_eixos += row[c_eixo]
            df.at[idx, "A Distribuir"] = row["TetoTotalDisponivel"] - soma_eixos

        return df

    def aba_uc_distribuicao(tab_uc):
        with tab_uc:
            st.subheader("Aloca√ß√£o de Recursos por Eixo Tem√°tico")

            # Flags de sess√£o
            if "edit_mode_uc_flag" not in st.session_state:
                st.session_state["edit_mode_uc_flag"] = False
            if "show_eixos_flag" not in st.session_state:
                st.session_state["show_eixos_flag"] = False
            if "show_tetos_flag" not in st.session_state:
                st.session_state["show_tetos_flag"] = False



            

            # Checkbox de modo edi√ß√£o
            edit_mode = st.toggle(
                "Ativar Modo de Edi√ß√£o para Distribui√ß√£o",
                value=st.session_state["edit_mode_uc_flag"],
                key="modo_edicao_uc"
            )
            if edit_mode != st.session_state["edit_mode_uc_flag"]:
                st.session_state["edit_mode_uc_flag"] = edit_mode
                st.rerun()

            # Carrega do banco
            df_all = load_data_from_db()
            # drop colunas DEMANDANTE, A√á√ÉO DE APLICA√á√ÉO, id_demandante, id_acao e nome da proposta
            df_all.drop(columns=[
                "DEMANDANTE (diretoria)", 
                "A√á√ÉO DE APLICA√á√ÉO", 
                "id_demandante", 
                "id_acao", 
                "Nome da Proposta/Iniciativa Estruturante"], 
                inplace=True, errors='ignore')
            

            
            
            if df_all.empty:
                st.warning("Nenhuma UC dispon√≠vel para esta iniciativa.")
                return

            # ---------------------------------------------------
            # MODO VISUALIZA√á√ÉO
            # ---------------------------------------------------
            if not st.session_state["edit_mode_uc_flag"]:
                # Checkboxes de exibi√ß√£o
                st.session_state["show_eixos_flag"] = st.toggle(
                    "Exibir Eixos Tem√°ticos?",
                    value=st.session_state["show_eixos_flag"]
                )
                st.session_state["show_tetos_flag"] = st.toggle(
                    "Exibir Tetos?",
                    value=st.session_state["show_tetos_flag"]
                )

                df_viz = df_all.copy()


                # filtra somente colunas de eixos com valores diferentes de 0
                col_eixos_db = [c for c in df_viz.columns if c not in COL_PADRAO]
                for c_eixo in col_eixos_db:
                    if df_viz[c_eixo].sum() == 0:
                        df_viz.drop(columns=[c_eixo], inplace=True)
                
                # filtra somente linhas com teto total dispon√≠vel maior que 0
                df_viz = df_viz[df_viz["TetoTotalDisponivel"] > 0]
                if df_viz.empty:
                    st.warning("Nenhuma UC dispon√≠vel com teto total maior que 0.")
                    return

               

                # Exibimos apenas as colunas principais inicialmente
                # Precisamos de "No", "Unidade de Conserva√ß√£o", "TetoTotalDisponivel", "A Distribuir"
                # mas "No" n√£o existe no DF, ent√£o vamos inserir manualmente.
                df_viz.reset_index(drop=True, inplace=True)
                df_viz.insert(0, "No", range(1, len(df_viz) + 1))

                # Quais eixos existem no DB
                col_eixos_db = [c for c in df_viz.columns if c not in COL_PADRAO]

                # Preparamos a lista exibir_cols
                exibir_cols = ["No", "Unidade de Conserva√ß√£o", "TetoTotalDisponivel", "A Distribuir"]

                if st.session_state["show_eixos_flag"] and col_eixos_db:
                    exibir_cols += col_eixos_db

                col_tetos = ["TetoSaldo dispon√≠vel", "TetoPrevisto 2025", "TetoPrevisto 2026", "TetoPrevisto 2027"]
                if st.session_state["show_tetos_flag"]:
                    for c_teto in col_tetos:
                        if c_teto in df_viz.columns:
                            exibir_cols.append(c_teto)

                # Remove duplicadas (caso algum glitch ocorra)
                exibir_cols = list(dict.fromkeys(exibir_cols))  

                # Filtra DF para as colunas existentes
                exibir_cols = [c for c in exibir_cols if c in df_viz.columns]
                df_viz = df_viz[exibir_cols]

                # Formata√ß√£o monet√°ria (fun√ß√£o)
                def fmt_moeda(x):
                    try:
                        return f"<div style='text-align:right;'>R$ {float(x):,.2f}</div>"
                    except:
                        return "<div style='text-align:right;'>R$ 0,00</div>"

                # Aplica formata√ß√£o nos campos monet√°rios (TetoTotal, Saldo, eixos, tetos)
                for col in df_viz.columns:
                    if col not in ["No", "Unidade de Conserva√ß√£o", "info"]:
                        # Tenta converter
                        df_viz[col] = df_viz[col].apply(fmt_moeda)

                # Cria coluna "info" SEMPRE (para exibir o √≠cone), mas com tooltip condicional
                def build_tooltip(row):
                    lines = []

                    # # Se existirem eixos
                    if st.session_state["show_eixos_flag"]:
                        for c_eixo in col_eixos_db:  # <-- col_eixos_db deve estar definido fora
                            if c_eixo in row:
                                val = row[c_eixo]
                                # Garante que seja string
                                if not isinstance(val, str):
                                    val = fmt_moeda(val)   # chama a fun√ß√£o de formata√ß√£o
                                # "descasca" se necess√°rio
                                v_clean = val.replace("<div style='text-align:right;'>","").replace("</div>","")
                                lines.append(f"{c_eixo}: <strong>{v_clean}</strong>")

                    # Se existirem tetos
                    # if st.session_state["show_tetos_flag"]:
                    for c_teto in col_tetos:
                        if c_teto in row:
                            val = row[c_teto]
                            if not isinstance(val, str):
                                val = fmt_moeda(val)
                            v_clean = val.replace("<div style='text-align:right;'>","").replace("</div>","")
                            lines.append(f"{c_teto}: <strong>{v_clean}</strong>")

         



                    # Se n√£o houver dados, adiciona uma linha padr√£o
                    # (isso evita que o tooltip fique vazio)
                    if not lines:
                        lines.append("Sem dados extras")

                    tooltip_content = "<br>".join(lines)
                    icon_html = f"""
                    <span class="tooltip" style="cursor:pointer;">
                        ‚ÑπÔ∏è
                        <span class="tooltiptext">{tooltip_content}</span>
                    </span>
                    """
                    return icon_html.replace("\n", "")


                df_viz["info"] = df_viz.apply(build_tooltip, axis=1)

                # Reposiciona "info" como segunda coluna
                # 1) remove se existir
                col_list = df_viz.columns.tolist()
                if "info" in col_list:
                    col_list.remove("info")
                    if "No" in col_list:
                        col_list.remove("No")
                        col_list = ["No", "info"] + col_list
                    else:
                        col_list = ["info"] + col_list
                df_viz = df_viz[col_list]

                # Linha de total
                # Usar df_all (sem formata√ß√£o)
                df_all_num = df_all.copy()
                df_all_num.reset_index(drop=True, inplace=True)
                df_all_num.insert(0, "No", range(1, len(df_all_num) + 1))

                # Recalcula (ou garante) num√©rico para colunas
                for c in df_all_num.columns:
                    if c not in ["No", "id", "id_iniciativa", "Unidade de Conserva√ß√£o"]:
                        df_all_num[c] = pd.to_numeric(df_all_num[c], errors="coerce").fillna(0)

                soma_dict = {}
                for c in df_viz.columns:
                    if c in df_all_num.columns and c not in ["No", "Unidade de Conserva√ß√£o", "info"]:
                        soma_val = df_all_num[c].sum()
                        soma_dict[c] = fmt_moeda(soma_val)

                total_row = {}
                for c in df_viz.columns:
                    if c == "No":
                        total_row[c] = ""
                    elif c == "Unidade de Conserva√ß√£o":
                        total_row[c] = "<strong>TOTAL</strong>"
                    elif c == "info":
                        total_row[c] = ""
                    else:
                        total_row[c] = soma_dict.get(c, "<div style='text-align:right;'>R$ 0,00</div>")

                df_viz.loc[len(df_viz)] = total_row

                # Renomeia colunas
                rename_map = {
                    "Unidade de Conserva√ß√£o": "Unidade de Conserva√ß√£o",
                    "TetoSaldo dispon√≠vel":   "Teto Saldo Dispon√≠vel",
                    "TetoPrevisto 2025":      "Teto Previsto 2025",
                    "TetoPrevisto 2026":      "Teto Previsto 2026",
                    "TetoPrevisto 2027":      "Teto Previsto 2027",
                    "TetoTotalDisponivel":    "Teto Total",
                    "A Distribuir":           "Saldo a Distribuir"
                }
                df_viz.rename(columns=rename_map, inplace=True)

                # CSS p/ tooltip
                custom_css = """
                <style>
                .table-container {
                    max-height: 600px;
                    overflow-y: auto;
                    margin-bottom: 1rem;
                    border: 1px solid #ccc;
                }
                .table-container table {
                    border-collapse: collapse;
                    width: 100%;
                }
                .table-container th, .table-container td {
                    border: 1px solid #ddd;
                    padding: 8px;
                }
                .table-container th {
                    background-color: #f2f2f2;
                    position: sticky;
                    top: 0;
                    z-index: 2;
                    text-align: center;
                }
                .tooltip {
                    position: relative;
                    display: inline-block;
                }
                /* Ajuste para posicionar o tooltip mais √† direita */
                .tooltip .tooltiptext {
                    visibility: hidden;
                    width: 280px;
                    background-color: #fafafa;
                    color: #000;
                    text-align: left;
                    border: 1px solid #ccc;
                    padding: 5px;
                    border-radius: 4px;
                    font-size: 0.9em;
                    position: absolute;
                    z-index: 1;
                    top: 150%;      /* Move ligeiramente para cima */
                    left: -120%;      /* Mover para a direita */
                }
                .tooltip:hover .tooltiptext {
                    visibility: visible;
                }
                /* centralizar o √≠cone de informa√ß√£o */
                .tooltip {
                    text-align: center;
                    display: block;
                    margin: 0 auto;
                }
                /* centralizar primeira coluna (No) */
                .table-container th:first-child, .table-container td:first-child {
                    text-align: center;
                }
                </style>
                """

                st.markdown(custom_css, unsafe_allow_html=True)
                html_table = df_viz.to_html(index=False, escape=False)
                st.markdown(f"<div class='table-container'>{html_table}</div>", unsafe_allow_html=True)

                st.info("Visualiza√ß√£o atual. Marque 'Ativar Modo de Edi√ß√£o' para alterar valores nos eixos.")

            # ---------------------------------------------------
            # MODO EDI√á√ÉO
            # ---------------------------------------------------
            else:
                st.warning("Modo de Edi√ß√£o: Ajuste valores, clique em 'Calcular Saldo' ou 'Salvar Distribui√ß√£o'.")

                df_edit = df_all.copy()  # dados do DB
                # Vamos descobrir as colunas de eixos no DB
                col_eixos_db = [c for c in df_edit.columns if c not in COL_PADRAO]

                # Eixos do session_state
                eixos_cfg = st.session_state.get("eixos_tematicos", [])
                col_eixos_sess = [e["nome_eixo"] for e in eixos_cfg]

                # Uni√£o
                col_eixos_all = list(set(col_eixos_db + col_eixos_sess))

                for c_eixo in col_eixos_all:
                    if c_eixo not in df_edit.columns:
                        df_edit[c_eixo] = 0.0

                # Garante colunas fixas
                col_fixas = ["id", "Unidade de Conserva√ß√£o", "TetoTotalDisponivel", "A Distribuir"]
                col_fixas = [c for c in col_fixas if c in df_edit.columns]

                cols_editor = col_fixas + col_eixos_all

                # Reseta √≠ndice
                df_edit = df_edit[cols_editor].reset_index(drop=True)

                # Configura column_config
                column_config = {}
                for c in cols_editor:
                    if c == "id":
                        column_config[c] = st.column_config.TextColumn(label="ID (Interno)", disabled=True)
                    elif c == "Unidade de Conserva√ß√£o":
                        column_config[c] = st.column_config.TextColumn(label="Unidade de Conserva√ß√£o", disabled=True)
                    elif c == "TetoTotalDisponivel":
                        column_config[c] = st.column_config.NumberColumn(label="Teto Total", disabled=True, format="accounting")
                    elif c == "A Distribuir":
                        column_config[c] = st.column_config.NumberColumn(label="Saldo a Distribuir", disabled=True, format="accounting")
                    else:
                        # Eixo
                        column_config[c] = st.column_config.NumberColumn(label=c, format="accounting")

                
                # verifica os eixos selecionados que est√£o armazenados no session_state
                # ent√£o filtra o DataFrame para mostrar somente os eixos que est√£o selecionados
                if col_eixos_sess:
                    df_edit = df_edit[[c for c in df_edit.columns if c in col_eixos_sess or c in col_fixas]]
                else:
                    # Se n√£o houver eixos selecionados, mostra apenas as colunas fixas
                    df_edit = df_edit[col_fixas] 

                               

                # filtra somente linhas com teto total dispon√≠vel maior que 0
                df_edit = df_edit[df_edit["TetoTotalDisponivel"] > 0]
                if df_edit.empty:
                    st.warning("Nenhuma UC dispon√≠vel com teto total maior que 0.")
                    return
                


                edited_df = st.data_editor(
                    df_edit,
                    column_config=column_config,
                    hide_index=True,
                    use_container_width=True,
                    key="editor_uc"
                )

                col1, col2 = st.columns(2)

                # Bot√£o SALVAR
                with col1:
                    if st.button("Salvar Distribui√ß√£o de Recursos"):
                        # 1) Salvar no DB (eixos + A Distribuir)
                        salvar_no_banco(edited_df, col_eixos_all)
                        st.success("Distribui√ß√£o salva! Retornando √† visualiza√ß√£o...")
                        # 2) Sair do modo edi√ß√£o
                        st.session_state["edit_mode_uc_flag"] = False
                        time.sleep(1)
                        st.rerun()

                # Bot√£o CALCULAR SALDO
                with col2:
                    if st.button("Calcular Saldo"):
                        # Precisamos recalcular local e tamb√©m salvar no DB
                        df_calc = edited_df.copy()
                        df_calc = recalcular_saldo(df_calc)
                        salvar_no_banco(df_calc, col_eixos_all)

                        st.success("Saldo recalculado e salvo no banco!")
                        time.sleep(1)
                        st.rerun()

    # ---------------------------------------------------------
    # chama a fun√ß√£o para exibir a aba de distribui√ß√£o de recursos
    # ---------------------------------------------------------
    aba_uc_distribuicao(tab_uc)


























    # # ---------------------------------------------------------
    # # 6) UNIDADES DE CONSERVA√á√ÉO - Distribui√ß√£o de Recursos (tab_uc) - EM DATAFRAME
    # # ---------------------------------------------------------
    # with tab_uc:
    #     st.subheader("Distribui√ß√£o de Recursos por Unidade de Conserva√ß√£o")

    #     conn = sqlite3.connect(DB_PATH)
    #     df_uc = pd.read_sql_query("SELECT * FROM tf_distribuicao_elegiveis", conn)
    #     conn.close()

    #     if df_uc.empty:
    #         st.warning("Nenhuma Unidade de Conserva√ß√£o dispon√≠vel para distribui√ß√£o de recursos.")
    #         st.stop()

    #     # Filtra pela iniciativa
    #     df_uc = df_uc[df_uc["id_iniciativa"] == nova_iniciativa]

    #     # Se desejar, ajuste a ordem e o nome das colunas
    #     # Colunas mencionadas na imagem: TetoSaldo dispon√≠vel, TetoPrevisto 2025,
    #     # TetoPrevisto 2026, TetoPrevisto 2027, TetoTotalDisponivel, A Distribuir
    #     # e tamb√©m as colunas de UC e A√ß√£o
    #     colunas = [
    #         "Unidade de Conserva√ß√£o",
    #         "A√á√ÉO DE APLICA√á√ÉO",
    #         "TetoSaldo dispon√≠vel",
    #         "TetoPrevisto 2025",
    #         "TetoPrevisto 2026",
    #         "TetoPrevisto 2027",
    #         "TetoTotalDisponivel",
    #         "A Distribuir"
    #     ]

    #     # Filtra o DataFrame para ter s√≥ essas colunas (caso existam no DF)
    #     df_uc = df_uc[[c for c in colunas if c in df_uc.columns]]

    #     # Formata cada coluna num√©rica no padr√£o R$ e alinha √† direita
    #     def formata_real(valor):
    #         return f"<div style='text-align: right;'>R$ {valor:,.2f}</div>" if pd.notnull(valor) else ""

    #     # Para cada coluna que deve ser monet√°ria, aplicar a formata√ß√£o
    #     colunas_numericas = [
    #         "TetoSaldo dispon√≠vel",
    #         "TetoPrevisto 2025",
    #         "TetoPrevisto 2026",
    #         "TetoPrevisto 2027",
    #         "TetoTotalDisponivel",
    #         "A Distribuir"
    #     ]
    #     for col in colunas_numericas:
    #         if col in df_uc.columns:
    #             df_uc[col] = df_uc[col].apply(formata_real)

    #     # Renomeia para exibir t√≠tulos mais amig√°veis na tabela
    #     df_uc.rename(columns={
    #         "Unidade de Conserva√ß√£o": "Unidade de Conserva√ß√£o",
    #         "A√á√ÉO DE APLICA√á√ÉO": "A√ß√£o de Aplica√ß√£o",
    #         "TetoSaldo dispon√≠vel": "Teto Saldo Dispon√≠vel",
    #         "TetoPrevisto 2025": "Teto 2025",
    #         "TetoPrevisto 2026": "Teto 2026",
    #         "TetoPrevisto 2027": "Teto 2027",
    #         "TetoTotalDisponivel": "Teto Total",
    #         "A Distribuir": "Saldo a Distribuir"
    #     }, inplace=True)

    #     st.write("Unidades de Conserva√ß√£o eleg√≠veis com recursos dispon√≠veis para distribui√ß√£o:")

    #     # Converte o DataFrame em HTML, sem escapar tags (para alinhar √† direita)
    #     html_table = df_uc.to_html(escape=False, index=False)

    #     # Renderiza via markdown, permitindo HTML
    #     st.markdown(html_table, unsafe_allow_html=True)





















    

    # -------------------------------------------
    # 7) FORMAS DE CONTRATA√á√ÉO
    # -------------------------------------------

    with tab_forma_contratacao:
        st.title("Formas de Contrata√ß√£o")

        # ----------------------------------------------------------------
        # 1) Carrega, se ainda n√£o carregamos para esta iniciativa
        #    (Assim, a cada troca de iniciativa, recarrega do banco)
        # ----------------------------------------------------------------
        if ("formas_carregou_iniciativa" not in st.session_state
                or st.session_state["formas_carregou_iniciativa"] != nova_iniciativa):

            st.session_state["formas_carregou_iniciativa"] = nova_iniciativa

            # 1.1) Consulta a coluna 'formas_contratacao' no banco
            conn = sqlite3.connect(DB_PATH)
            row_formas = conn.execute("""
                SELECT formas_contratacao
                FROM tf_cadastro_regras_negocio
                WHERE id_iniciativa = ?
                ORDER BY data_hora DESC
                LIMIT 1
            """, (nova_iniciativa,)).fetchone()
            conn.close()

            # 1.2) Se existir JSON no banco, parseamos
            if row_formas and row_formas[0]:
                try:
                    stored_formas = json.loads(row_formas[0])
                except:
                    stored_formas = {}
            else:
                stored_formas = {}

            # 1.3) Monta DF default (4 formas) caso n√£o tenha nada
            df_default = pd.DataFrame({
                "Forma de Contrata√ß√£o": [
                    "Contrato Caixa",
                    "Contrato ICMBio",
                    "Funda√ß√£o de Apoio credenciada pelo ICMBio",
                    "Funda√ß√£o de Amparo √† pesquisa"
                ],
                "Selecionado": [False, False, False, False]
            })

            # 1.4) Se temos 'tabela_formas' no banco, converte em DF;
            #      caso contr√°rio, use df_default
            tabela_formas_banco = stored_formas.get("tabela_formas", [])
            if tabela_formas_banco:
                st.session_state["df_formas_contratacao"] = pd.DataFrame(
                    tabela_formas_banco)
            else:
                st.session_state["df_formas_contratacao"] = df_default.copy()

            # 1.5) Carrega ‚Äúdetalhes_por_forma‚Äù do banco e joga no session_state
            detalhes = stored_formas.get("detalhes_por_forma", {})
            # Exemplo: "Contrato Caixa" => {"Observa√ß√µes": "..."}
            if "Contrato Caixa" in detalhes:
                st.session_state["observacoes_caixa"] = detalhes["Contrato Caixa"].get(
                    "Observa√ß√µes", "")

            if "Contrato ICMBio" in detalhes:
                icmbio_data = detalhes["Contrato ICMBio"]
                st.session_state["contrato_icmbio_escolhido"] = icmbio_data.get(
                    "Contratos Escolhidos", [])
                st.session_state["coord_geral_gestora"] = icmbio_data.get(
                    "Coordena√ß√£o Geral Gestora", "N√£o")
                st.session_state["justificativa_icmbio"] = icmbio_data.get(
                    "Justificativa Uso ICMBio", "")

            if "Funda√ß√£o de Apoio credenciada pelo ICMBio" in detalhes:
                fa_data = detalhes["Funda√ß√£o de Apoio credenciada pelo ICMBio"]
                st.session_state["existe_projeto_cppar"] = fa_data.get(
                    "J√° existe projeto CPPar?", "N√£o")
                st.session_state["sei_projeto"] = fa_data.get(
                    "SEI do Projeto", "")
                st.session_state["sei_ata"] = fa_data.get(
                    "SEI da Ata/Decis√£o CPPar", "")
                st.session_state["in_concorda"] = fa_data.get(
                    "Concorda com IN 18/2018 e 12/2024?", "N√£o")
                st.session_state["justificativa_fundacao"] = fa_data.get(
                    "Justificativa Funda√ß√£o de Apoio", "")

            if "Funda√ß√£o de Amparo √† pesquisa" in detalhes:
                amparo_data = detalhes["Funda√ß√£o de Amparo √† pesquisa"]
                st.session_state["in_amparo"] = amparo_data.get(
                    "IN de Amparo?", "N√£o")
                # Funda√ß√µes Selecionadas √© string, ex.: "FAPESP, FAPEMIG"
                f_str = amparo_data.get("Funda√ß√µes Selecionadas", "")
                if f_str:
                    st.session_state["f_aparceria"] = [x.strip()
                                                       for x in f_str.split(",") if x.strip()]
                else:
                    st.session_state["f_aparceria"] = []
                st.session_state["parcerias_info"] = amparo_data.get(
                    "Informa√ß√µes de Parceria", "")

        # ----------------------------------------------------------------
        # 2) Agora exibir a UI, com os DF e expansions
        # ----------------------------------------------------------------
        with st.form("form_formas_contratacao"):
            # (a) Data Editor do DF
            df_editor = st.data_editor(
                st.session_state["df_formas_contratacao"],
                column_config={
                    "Forma de Contrata√ß√£o": st.column_config.TextColumn(disabled=True),
                    "Selecionado": st.column_config.CheckboxColumn("Selecionar")
                },
                hide_index=True,
                key="formas_editor"
            )
            st.session_state["df_formas_contratacao"] = df_editor.copy()

            selected_forms = df_editor.loc[df_editor["Selecionado"],
                                           "Forma de Contrata√ß√£o"].tolist()

            if st.form_submit_button("Salvar Formas Selecionadas"):
                st.success("Sele√ß√£o registrada com sucesso!")

        st.divider()

        # (b) Exibe os expanders conforme selected_forms
        if "Contrato Caixa" in selected_forms:
            with st.expander("üìå Contrato Caixa", expanded=False):
                st.session_state["observacoes_caixa"] = st.text_area(
                    "Observa√ß√µes",
                    value=st.session_state.get("observacoes_caixa", ""),
                    help="Inclua aqui quaisquer observa√ß√µes relativas ao contrato CAIXA."
                )

        if "Contrato ICMBio" in selected_forms:
            with st.expander("üìå Contrato ICMBio", expanded=False):
                contratos_disponiveis = [
                    "Contrato ICMBio 1", "Contrato ICMBio 2", "Contrato ICMBio 3", "n√£o informado"]
                sel_anterior = st.session_state.get(
                    "contrato_icmbio_escolhido", [])
                st.session_state["contrato_icmbio_escolhido"] = st.multiselect(
                    "Quais contratos do ICMBio ...",
                    options=contratos_disponiveis,
                    default=sel_anterior
                )
                st.session_state["coord_geral_gestora"] = st.radio(
                    "A coordena√ß√£o geral √© gestora ...?",
                    options=["Sim", "N√£o"],
                    index=["Sim", "N√£o"].index(
                        st.session_state.get("coord_geral_gestora", "N√£o"))
                )
                st.session_state["justificativa_icmbio"] = st.text_area(
                    "Justificativa ...",
                    value=st.session_state.get("justificativa_icmbio", "")
                )

        if "Funda√ß√£o de Apoio credenciada pelo ICMBio" in selected_forms:
            with st.expander("üìå Funda√ß√£o de Apoio credenciada pelo ICMBio", expanded=False):
                st.session_state["existe_projeto_cppar"] = st.radio(
                    "J√° existe projeto aprovado pela CPPar ...?",
                    options=["Sim", "N√£o"],
                    index=["Sim", "N√£o"].index(
                        st.session_state.get("existe_projeto_cppar", "N√£o"))
                )
                if st.session_state["existe_projeto_cppar"] == "Sim":
                    st.session_state["sei_projeto"] = st.text_input(
                        "Informe o n√∫mero SEI ...",
                        value=st.session_state.get("sei_projeto", "")
                    )
                    st.session_state["sei_ata"] = st.text_input(
                        "N√∫mero SEI da Ata ...",
                        value=st.session_state.get("sei_ata", "")
                    )
                st.session_state["in_concorda"] = st.radio(
                    "A iniciativa est√° de acordo com IN 18/2018 ...?",
                    options=["Sim", "N√£o"],
                    index=["Sim", "N√£o"].index(
                        st.session_state.get("in_concorda", "N√£o"))
                )
                st.session_state["justificativa_fundacao"] = st.text_area(
                    "Justificativa para uso ...",
                    value=st.session_state.get("justificativa_fundacao", "")
                )

        if "Funda√ß√£o de Amparo √† pesquisa" in selected_forms:
            with st.expander("üìå Funda√ß√£o de Amparo √† Pesquisa", expanded=False):
                st.session_state["in_amparo"] = st.radio(
                    "A iniciativa ...?",
                    options=["Sim", "N√£o"],
                    index=["Sim", "N√£o"].index(
                        st.session_state.get("in_amparo", "N√£o"))
                )
                # 1) Se no session_state est√° "n√£o informado", convertemos p/ lista vazia antes de passar ao multiselect
                sel_anterior = st.session_state.get("f_aparceria", [])
                if isinstance(sel_anterior, str) and sel_anterior.strip().lower() == "n√£o informado":
                    sel_anterior = []

                # 2) Exibimos o multiselect, passando a lista de strings como default
                fundacoes_disponiveis = [
                    "FAPESP", "FAPERJ", "FAPEMIG", "Outra...", "n√£o informado"]
                st.session_state["f_aparceria"] = st.multiselect(
                    "Quais Funda√ß√µes de Amparo ...",
                    options=fundacoes_disponiveis,
                    default=sel_anterior,
                    help="Selecione uma ou mais funda√ß√µes, caso existam."
                )
                st.session_state["parcerias_info"] = st.text_area(
                    "H√° parcerias ...?",
                    value=st.session_state.get("parcerias_info", "")
                )

        detalhes_por_forma = {}

        # 1) Sempre salvar "tabela_formas"
        formas_df_dict = st.session_state["df_formas_contratacao"].to_dict(
            orient="records")

        # 2) Verificar quais formas foram selecionadas
        selected_forms = [row["Forma de Contrata√ß√£o"]
                          for row in formas_df_dict if row["Selecionado"]]

        def not_informed_if_empty(value):
            """Se for string/lista vazia, retorna 'n√£o informado'; caso contr√°rio, retorna o valor."""
            if value is None:
                return "n√£o informado"
            if isinstance(value, str):
                if not value.strip():
                    return "n√£o informado"
                return value
            if isinstance(value, list):
                if len(value) == 0:
                    return "n√£o informado"
                return value
            return value

        # 3) Se "Contrato Caixa" estiver em selected_forms, montar dict
        if "Contrato Caixa" in selected_forms:
            detalhes_por_forma["Contrato Caixa"] = {
                "Observa√ß√µes": not_informed_if_empty(st.session_state.get("observacoes_caixa", ""))
            }

        if "Contrato ICMBio" in selected_forms:
            detalhes_por_forma["Contrato ICMBio"] = {
                "Contratos Escolhidos": not_informed_if_empty(st.session_state.get("contrato_icmbio_escolhido", [])),
                "Coordena√ß√£o Geral Gestora": not_informed_if_empty(st.session_state.get("coord_geral_gestora", "")),
                "Justificativa Uso ICMBio": not_informed_if_empty(st.session_state.get("justificativa_icmbio", ""))
            }

        if "Funda√ß√£o de Apoio credenciada pelo ICMBio" in selected_forms:
            existe_proj = not_informed_if_empty(
                st.session_state.get("existe_projeto_cppar", ""))
            fundacao_dict = {
                "J√° existe projeto CPPar?": existe_proj
            }
            if existe_proj == "Sim":  # Se for "n√£o informado" n√£o entraria, mas a crit√©rio seu
                fundacao_dict["SEI do Projeto"] = not_informed_if_empty(
                    st.session_state.get("sei_projeto", ""))
                fundacao_dict["SEI da Ata/Decis√£o CPPar"] = not_informed_if_empty(
                    st.session_state.get("sei_ata", ""))

            fundacao_dict["Concorda com IN 18/2018 e 12/2024?"] = not_informed_if_empty(
                st.session_state.get("in_concorda", ""))
            fundacao_dict["Justificativa Funda√ß√£o de Apoio"] = not_informed_if_empty(
                st.session_state.get("justificativa_fundacao", ""))

            detalhes_por_forma["Funda√ß√£o de Apoio credenciada pelo ICMBio"] = fundacao_dict

        if "Funda√ß√£o de Amparo √† pesquisa" in selected_forms:
            amparo_dict = {
                "IN de Amparo?": not_informed_if_empty(st.session_state.get("in_amparo", "")),
                "Funda√ß√µes Selecionadas": not_informed_if_empty(st.session_state.get("f_aparceria", [])),
                "Informa√ß√µes de Parceria": not_informed_if_empty(st.session_state.get("parcerias_info", "")),
            }
            detalhes_por_forma["Funda√ß√£o de Amparo √† pesquisa"] = amparo_dict

        # Agora unimos tudo em st.session_state
        formas_dict = {
            "tabela_formas": formas_df_dict,
            "detalhes_por_forma": detalhes_por_forma
        }

        st.session_state["formas_contratacao_detalhes"] = formas_dict

    # bot√£o do form para salvar os dados editados na sess√£o
    if st.form_submit_button("Salvar Altera√ß√µes"):

        # Verifica√ß√£o pr√©via antes de salvar
        if not st.session_state["objetivo_geral"]:
            st.error("O campo 'Objetivo Geral' n√£o pode estar vazio.")
        elif not st.session_state["objetivos_especificos"]:
            st.error("A lista de 'Objetivos Espec√≠ficos' n√£o pode estar vazia.")
        elif not st.session_state["introducao"]:
            st.error("O campo 'Introdu√ß√£o' n√£o pode estar vazio.")
        elif not st.session_state["justificativa"]:
            st.error("O campo 'Justificativa' n√£o pode estar vazio.")
        elif not st.session_state["metodologia"]:
            st.error("O campo 'Metodologia' n√£o pode estar vazio.")
        else:
            # salvar objetivos geral e espec√≠ficos
            st.session_state["objetivo_geral"] = st.session_state["objetivo_geral"]

            # salvar textos
            st.session_state["introducao"] = st.session_state["introducao"]
            st.session_state["justificativa"] = st.session_state["justificativa"]
            st.session_state["metodologia"] = st.session_state["metodologia"]

            # salvar eixos tem√°ticos
            st.session_state["eixos_tematicos"] = st.session_state["eixos_tematicos"]

            # salvar insumos
            if "insumos" not in st.session_state:
                st.session_state["insumos"] = {}
            else:
                st.session_state["insumos"] = st.session_state["insumos"]

            # salvar unidades de conserva√ß√£o
            st.session_state["df_uc_editado"] = st.session_state["df_uc_editado"]

            # st.success("Altera√ß√µes salvas com sucesso!")

        st.success("Altera√ß√µes salvas com sucesso!")


# -------------------------------------------
# BOT√ÉO FINAL PARA SALVAR CADASTRO
# -------------------------------------------
st.divider()
col1, col2, col3 = st.columns(3)
with col2:
    if st.button("üìù Enviar Cadastro", key="btn_salvar_geral"):
        salvar_dados_iniciativa(
            id_iniciativa=nova_iniciativa,
            usuario=cpf_usuario,
            objetivo_geral=st.session_state["objetivo_geral"],
            objetivos_especificos=st.session_state["objetivos_especificos"],
            eixos_tematicos=st.session_state["eixos_tematicos"],
            introducao=st.session_state["introducao"],
            justificativa=st.session_state["justificativa"],
            metodologia=st.session_state["metodologia"],
            demais_informacoes=st.session_state["demais_informacoes"]
        )
        st.success("‚úÖ Cadastro atualizado com sucesso!")


st.divider()
# st.caption("‚ÑπÔ∏è Informa√ß√µes Originais do Resumo Executivo de Iniciativas", help="ref.: documentos SEI")

# # 1) Exibe resumos do SETOR
# def tratar_valor(valor):
#     if pd.isna(valor) or valor is None or str(valor).strip().lower() == "null":
#         return "(sem informa√ß√£o)"
#     return str(valor).strip()

# resumos = carregar_resumo_iniciativa(setor)
# if resumos is not None:
#     for _, r in resumos.iterrows():
#         nome_inic = tratar_valor(r.get("iniciativa", "Iniciativa Desconhecida"))
#         with st.expander(f"üìñ {nome_inic}", expanded=False):
#             st.divider()
#             st.write(f"**üéØ Objetivo Geral:** {tratar_valor(r.get('objetivo_geral'))}")
#             st.divider()
#             st.write(f"**üè¢ Diretoria:** {tratar_valor(r.get('diretoria'))}")
#             st.write(f"**üìå Coordena√ß√£o Geral:** {tratar_valor(r.get('coordena√ß√£o_geral'))}")
#             st.write(f"**üóÇ Coordena√ß√£o:** {tratar_valor(r.get('coordena√ß√£o'))}")
#             st.write(f"**üìç Demandante:** {tratar_valor(r.get('demandante'))}")
#             st.divider()
#             st.write(f"**üìù Introdu√ß√£o:** {tratar_valor(r.get('introdu√ß√£o'))}")
#             st.divider()
#             st.write(f"**üí° Justificativa:** {tratar_valor(r.get('justificativa'))}")
#             st.divider()
#             st.write(f"**üèû Unidades de Conserva√ß√£o / Benef√≠cios:** {tratar_valor(r.get('unidades_de_conserva√ß√£o_beneficiadas'))}")
#             st.divider()
#             st.write(f"**üî¨ Metodologia:** {tratar_valor(r.get('metodologia'))}")

# st.divider()
